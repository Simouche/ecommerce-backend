# Generated by Django 3.1.4 on 2020-12-22 19:48

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('notification_token', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('phones', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50, unique=True, validators=[django.core.validators.RegexValidator('^\\+?[0-9]{,12}$', "The phone number you entered is not valid it must be of the international format.example '+213799136332'", 'Invalid PhoneNumber')], verbose_name='Phone Number'), size=None)),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='Active')),
                ('user_type', models.CharField(choices=[('C', 'Client'), ('S', 'Staff'), ('A', 'Admin')], help_text="The user's type can be one of the available choices, Client, Staff or Admin.", max_length=1, verbose_name='Type')),
                ('visible', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('name_ar', models.CharField(max_length=255, verbose_name='Arabic Name')),
                ('name_en', models.CharField(max_length=255, verbose_name='English Name')),
                ('code_postal', models.IntegerField(verbose_name='Postal Code')),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PasswordReset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('token', models.CharField(editable=False, max_length=255)),
                ('used', models.BooleanField(default=False)),
                ('email', models.EmailField(blank=True, editable=False, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, editable=False, max_length=20, null=True)),
                ('otp_code', models.CharField(blank=True, editable=False, max_length=5, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('name_ar', models.CharField(max_length=255, verbose_name='Arabic Name')),
                ('name_fr', models.CharField(max_length=255, verbose_name='English Name')),
            ],
            options={
                'verbose_name': 'Region',
                'verbose_name_plural': 'Regions',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SmsVerification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('otp_code', models.CharField(max_length=5)),
                ('number', models.CharField(editable=False, max_length=255, validators=[django.core.validators.RegexValidator('^\\+?[0-9]{,12}$', "The phone number you entered is not valid it must be of the international format.example '+213799136332'", 'Invalid PhoneNumber')])),
                ('confirmed', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('name_ar', models.CharField(max_length=255, verbose_name='Arabic Name')),
                ('name_fr', models.CharField(max_length=255, verbose_name='English Name')),
                ('matricule', models.IntegerField(verbose_name='Matricule')),
                ('code_postal', models.IntegerField(verbose_name='Postal Code')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='authentication.region', verbose_name='Region')),
            ],
            options={
                'verbose_name': 'State',
                'verbose_name_plural': 'States',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('visible', models.BooleanField(default=True)),
                ('photo', models.ImageField(blank=True, help_text="the user's profile picture.", null=True, upload_to='profile/', verbose_name='Profile Picture')),
                ('address', models.CharField(max_length=255, null=True, verbose_name='Address')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Birth Date')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], default='M', max_length=1, null=True, verbose_name='Gender')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='profiles', to='authentication.city', verbose_name='City')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, related_name='profile', to='authentication.user')),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='city',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='cities', to='authentication.state', verbose_name='State'),
        ),
    ]
